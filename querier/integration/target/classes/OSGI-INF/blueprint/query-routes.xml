<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<routeContext id="query-routes" xmlns="http://camel.apache.org/schema/blueprint">

		<route id="query-list">
			<from uri="direct:/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries"/>
			
			<to uri="direct:resolve-query-parents"/>
			
			<bean ref="queryRepo" method="withQuerySchema(${header.querySchemaId})"/>
			
			<!-- When returning a list, use the List view to limit the fields that are returned -->
			<setHeader headerName="CAMEL_JSON_VIEW">
				<constant>org.enquery.encryptedquery.querier.data.entity.json.Views$ListView</constant>
			</setHeader>
			
			<split strategyRef="arrayListAggregator">
				<simple>${body}</simple>
				<bean ref="queryConverter" method="toJSON"/>
			</split>
			
			<bean ref="queryConverter" method="toQueryCollectionResponse"/>
			<to uri="direct:success"/>
		</route>
		
		<route id="query-retrieve">
			<from uri="direct:/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}"/>
			
			<to uri="direct:resolve-query-parents"/>
			
			<bean ref="queryRepo" method="findForQuerySchema(${header.querySchema}, ${header.queryId})"/>
			
			<filter>
				<simple>${body} == null</simple>
				<log message="Query ${header.queryId} not found for ${header.querySchema}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
			
			<bean ref="queryConverter" method="toJSONResponse"/>
			<to uri="direct:success"/>
		</route>
	
		<route id="create-query">
			<from uri="direct:create-query"/>
			
			<to uri="direct:resolve-query-parents"/>
			
			<bean ref="queryConverter" method="toJPA(${header.querySchema}, ${body})"/>

			<bean ref="queryRepo" method="add"/>
			
			<inOnly uri="seda:encrypt-query"/>
			
			<bean ref="queryConverter" method="toJSONResponse"/>
			
 			<to uri="direct:created"/>
		</route>
		
		<route id="encrypt-query">
			<from uri="seda:encrypt-query?size={{encrypt.query.queue.size}}&amp;purgeWhenStopping=true&amp;concurrentConsumers={{encrypt.query.worker.count}}"/>
			
			<!-- Exception during Encryption -->
			<onException>
				<exception>org.enquery.encryptedquery.utils.PIRException</exception>
				<exception>java.lang.InterruptedException</exception>

				<handled><constant>true</constant></handled>
				
				<log loggingLevel="ERROR" message="Error encrypting Query: ${exception.stacktrace}." />
	
				<!-- save the error -->					
				<bean ref="queryUpdater" method="updateWithError(${header.query}, ${exception})"/>
			</onException>
			
			
			<!-- Reload query record to avoid stale date and/or lazy initialization errors
				Since this is Seda endpoint, it may take some time before it is processed. 
			-->
			<bean ref="queryRepo" method="find(${body.id})"/>
			
			<!-- Keep the Query in a header for later use -->
			<setHeader headerName="query">
				<simple>${body}</simple>
			</setHeader>
			
			<!-- Encrypt the Query -->
			<bean ref="queryCipher"/>
			
			<!-- save encrypted query and key -->
			<bean ref="queryUpdater" method="update(${header.query.id}, ${body})"/>
		</route>
		
		<route id="resolve-query-parents">
			<from uri="direct:resolve-query-parents"/>
		
			<to uri="direct:resolve-query-schema-parents"/>
			
			<setHeader headerName="querySchema">
				<method ref="querySchemaRepo" method="findForDataSchema(${header.dataSchema}, ${header.querySchemaId})"/>
			</setHeader>
			<filter>
				<simple>${header.querySchema} == null</simple>
				<log loggingLevel="ERROR" message="QuerySchema ${header.querySchemaId} not found for DataSchema ${header.dataSchemaId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
		</route>
		
	</routeContext>
</blueprint>
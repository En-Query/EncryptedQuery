<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<routeContext id="schedule-routes" xmlns="http://camel.apache.org/schema/blueprint">

		<route id="list-schedules">
			<from uri="direct:/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules"/>
			
			<to uri="direct:resolve-schedule-parents"/>
			
			<bean ref="scheduleRepo" method="listForQuery(${header.query})"/>
			
			<!-- When returning a list, use the List view to limit the fields that are returned -->
			<setHeader headerName="CAMEL_JSON_VIEW">
				<constant>org.enquery.encryptedquery.querier.data.entity.json.Views$ListView</constant>
			</setHeader>
			
			<bean ref="scheduleConverter" method="toJSONResponse"/>
			
			<to uri="direct:success"/>
		</route>

		<route id="retrieve-schedule">
			<from uri="direct:/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules/{scheduleId}"/>
			
			<!-- Exception when connecting to responder -->
			<onException>
				<exception>org.apache.camel.http.common.HttpOperationFailedException</exception>
				<exception>org.apache.http.conn.HttpHostConnectException</exception>
				<exception>java.net.ConnectException</exception>
				<exception>java.io.IOException</exception>

				<continued><constant>true</constant></continued>
				
				<log loggingLevel="WARN" 
					message="Connection to Responder server failed with error: ${exception.stacktrace}." />
					
				<!-- restore the original schedule, since it could not be updated --> 
				<setBody>
					<simple>${exchangeProperty.schedule}</simple>
				</setBody>
				
			</onException>
			
			<to uri="direct:resolve-schedule-parents"/>
			
			<bean ref="scheduleRepo" method="findForQuery(${header.query}, ${header.scheduleId})"/>
			<filter>
				<simple>${body} == null</simple>
				<log message="Schedule not found: ${header.scheduleId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
			
			<!-- Save the schedule in case connection to responder fails, we can still return locally cached one -->
			<setProperty propertyName="schedule">
				<simple>${body}</simple>
			</setProperty>
			
			<!-- attempt to refresh the Schedule status from responder -->
			<filter>
				<simple>${body.status} != 'Complete' &amp;&amp; ${body.responderUri} != null</simple>
				
				<setHeader headerName="CamelHttpPath">
					<simple>${body.responderUri}</simple>
				</setHeader>
				<removeHeader headerName="CamelHttpQuery"/>
				
				<to uri="direct:get-from-responder"/>
				<unmarshal ref="executionFormat"/>
				
				<bean ref="scheduleUpdater" 
					method="updateFromExecution(
						${exchangeProperty.schedule.id},
						${body}
					)"/>
			</filter>
			
			<bean ref="scheduleConverter" method="toJSONResponse"/>
			<to uri="direct:success"/>
		</route>
		
		<route id="create-schedule">
			<from uri="direct:create-schedule"/>
			
			<to uri="direct:resolve-schedule-parents"/>
			
			<bean ref="scheduleUpdater" method="create(${body}, ${header.query})"/>
			
			<inOnly uri="seda:send-schedule-to-responder"/>
			
			<bean ref="scheduleConverter" method="toJSONResponse"/>

 			<to uri="direct:created"/>
		</route>
		
		<route id="send-schedule-to-responder">
 			<from uri="seda:send-schedule-to-responder?size={{send.schedule.queue.size}}&amp;purgeWhenStopping=true&amp;concurrentConsumers={{send.schedule.worker.count}}"/>

			<!-- use exchange property to save the schedule id, because headers are lost on the http call -->
			<setProperty propertyName="schedule">
				<simple>${body}</simple>
			</setProperty>
			
			<removeHeader headerName="CamelHttpQuery"/>
			<setHeader headerName="CamelHttpPath">
				<simple>${body.dataSource.executionsUri}</simple>
			</setHeader>

			<!-- TODO:  change to use input stream instead of POJO -->			
			<bean ref="executionConverter" method="toExecutionXMLStream"/>
			
			<!-- <marshal ref="executionFormat"/>-->
			<to uri="direct:send-to-responder"/>
			
			<!-- Update local Schedule with the Execution response obtained from Responder -->
			<unmarshal ref="executionFormat"/>
			
			<bean ref="scheduleUpdater" 
					method="updateFromExecution(
						${exchangeProperty.schedule.id},
						${body}
					)"/>
		</route>

		<route id="resolve-schedule-parents">
			<from uri="direct:resolve-schedule-parents"/>
			
			<to uri="direct:resolve-query-parents"/>
			
			<setHeader headerName="query">
				<method ref="queryRepo" method="findForQuerySchema(${header.querySchema}, ${header.queryId})"/>
			</setHeader>
			<filter>
				<simple>${header.query} == null</simple>
				<log loggingLevel="ERROR" message="Query ${header.queryId} not found for DataSchema ${header.dataSchemaId} and QuerySchema ${header.querySchemaId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
		</route>
	
	</routeContext>
</blueprint>
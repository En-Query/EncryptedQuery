<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<camelContext id="rest" trace="{{camel.trace.enabled}}" streamCache="true" xmlns="http://camel.apache.org/schema/blueprint">

		<errorHandler id="noErrorHandler" type="NoErrorHandler" />
	
		<routeContextRef ref="data-schema-routes"/>
		<routeContextRef ref="data-source-routes"/>
		<routeContextRef ref="query-routes"/>
		<routeContextRef ref="query-schema-routes"/>
		<routeContextRef ref="schedule-routes"/>
		<routeContextRef ref="result-routes"/>
		<routeContextRef ref="retrieval-routes"/>
		<routeContextRef ref="decryption-routes"/>
		
		<!-- Data format to unmarshal DataSources XML returned from Responder  -->
		<dataFormats>
			<jaxb  id="dataSourceFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/data-source-resources.xsd"
			/>
			<jaxb id="dataSchemaFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/data-schema-resources.xsd"
			/>
			<jaxb id="executionFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/execution-resources.xsd"
			/>
			<jaxb id="queryFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/query.xsd"
			/>
			<jaxb id="queryKeyFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/queryKey.xsd"
			/>
			<jaxb id="resultFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/result-resources.xsd"
			/>
			<jaxb id="responseFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/response.xsd"
			/>
				
		</dataFormats>

		<onException>
			<exception>java.lang.Exception</exception>
			<handled><constant>true</constant></handled>
			
			<log loggingLevel="ERROR" message="${exception.stacktrace}." />
			<setHeader headerName="CamelHttpResponseCode">
				<constant>500</constant>
			</setHeader>
			<setBody>
				<simple>${null}</simple>
			</setBody>
			<stop/>
		</onException>

		<restConfiguration 
			component="servlet"
			bindingMode="json"
			jsonDataFormat="JacksonDFWithDynamicViews"
			contextPath="{{context.path}}{{api.root.path}}" 
			port="{{port}}"
			enableCORS="false">

 			<componentProperty key="matchOnUriPrefix" value="true"/>
 			
 			<!-- multipart filter not working for some uknonwn reason -->
 			<componentProperty key="enableMultipartFilter" value="false"/>
 			
 			<endpointProperty key="headerFilterStrategy" value="#serverHeaderFilter" />
			<endpointProperty key="servletName" value="querierRestApiServlet"/>
			<dataFormatProperty key="prettyPrint" value="true" />
		</restConfiguration>
		

		<rest>
			<description>EncryptedQuery Querier Rest Services</description>
			<get>
				<description>Retrieve root URIs</description>
				<to uri="direct:resources"/>
			</get>
		</rest>
		
		<rest path="/dataschemas">
			<description>EncryptedQuery Querier Data Schema Rest Services</description>

			<get outType="org.enquery.encryptedquery.querier.data.entity.json.DataSchemaCollectionResponse">
				<description>Retrieve available data schemas</description>
				<to uri="direct:content-negotiation"/>
 			</get>
			
			<get uri="/{dataSchemaId}" outType="org.enquery.encryptedquery.querier.data.entity.json.DataSchemaResponse">
				<description>Retrieve a data schema by id</description>
				<to uri="direct:content-negotiation"/>
			</get>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/datasources" consumes="application/json" produces="application/json">
			<description>EncryptedQuery Querier Data Source Rest Services</description>
			
			<get outType="org.enquery.encryptedquery.querier.data.entity.json.DataSourceCollectionResponse">
				<description>Retrieve data sources for a given data schema</description>
			
				<param name="dataSchemaId" 
					type="path" 
					dataType="string"
					description="Parent Data Schema id."
				/>
			
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{dataSourceId}" outType="org.enquery.encryptedquery.querier.data.entity.json.DataSchemaResponse">
				<description>Retrieve a data source by id</description>

				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema id."
				/>
				
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Id of the Data Source to Retrieve."
				/>

				<to uri="direct:content-negotiation"/>
			</get>
		</rest>

		<rest path="/dataschemas/{dataSchemaId}/queryschemas" consumes="application/json" produces="application/json">
			<description>EncryptedQuery Querier Query Schema Services</description>

			<get>
				<description>Retrieve all available query schemas</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{querySchemaId}">
				<description>Retrieve a query schema by its id</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path"
					dataType="int" 
					description="Return the Query Schemas matching this Id, or HTTP code 404 if not found."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<post type="org.enquery.encryptedquery.querier.data.entity.json.QuerySchema"
				outType="org.enquery.encryptedquery.querier.data.entity.json.QuerySchemaResponse">
				
				<description>Create a new query schema</description>
				<to uri="direct:queryschema-create"/>
			</post>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries" consumes="application/json" produces="application/json">
			<description>EncryptedQuery Querier Query Services</description>

			<get>
				<description>Retrieve all available queries</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{queryId}">
				<description>Retrieve a Query by id</description>
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Id of Query to retrieve."
				/>
				<to uri="direct:content-negotiation"/>
			</get>
			
			<post type="org.enquery.encryptedquery.querier.data.entity.json.Query"
				outType="org.enquery.encryptedquery.querier.data.entity.json.QueryResponse">
				
				<description>Create a new Query</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<to uri="direct:create-query"/>
			</post>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules" consumes="application/json" produces="application/json">
			<description>EncryptedQuery Querier Schedule Services</description>

			<get>
				<description>Retrieve schedules for a query</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			
			<get uri="/{scheduleId}">
				<description>Retrieve a specific Schedule</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Id of schedule to retrieve."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			
			<post type="org.enquery.encryptedquery.querier.data.entity.json.Schedule"
				outType="org.enquery.encryptedquery.querier.data.entity.json.ScheduleResponse">
				
				<description>Create a new Schedule</description>

				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				
				<to uri="direct:create-schedule"/>
			</post>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules/{scheduleId}/results" 
			consumes="application/json" produces="application/json">
			<description>EncryptedQuery Querier Result Services</description>

			<get>
				<description>Retrieve results for a Schedule</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{resultId}">
				<description>Retrieve a given Result given its Id</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Id of the Result to retrieve"
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
		</rest>
						
		<rest path="/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules/{scheduleId}/results/{resultId}/retrievals" 
			consumes="application/json" produces="application/json">

			<description>EncryptedQuery Querier Retrievals Services</description>

			<get>
				<description>Retrieve Retrievals for a Result</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{retrievalId}">
				<description>Retrieve a Retrieval given its Id</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result"
				/>
				<param name="retrievalId" 
					type="path" 
					dataType="int"
					description="Id of Retrieval to retrieve"
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<post type="org.enquery.encryptedquery.querier.data.entity.json.Retrieval"
				outType="org.enquery.encryptedquery.querier.data.entity.json.RetrievalResponse">
				
				<description>Create a new Retrieval</description>

				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result"
				/>
				
				<to uri="direct:create-retrieval"/>
			</post>
		</rest>
		
		
		<rest path="/dataschemas/{dataSchemaId}/queryschemas/{querySchemaId}/queries/{queryId}/schedules/{scheduleId}/results/{resultId}/retrievals/{retrievalId}/decryptions" 
			consumes="application/json" produces="application/json">

			<description>EncryptedQuery Querier Decryption Services</description>

			<get>
				<description>Retrieve Decryptions for a Retrieval</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result."
				/>
				<param name="retrievalId" 
					type="path" 
					dataType="int"
					description="Parent Retrieval"
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<get uri="/{decryptionId}">
				<description>Retrieve a Decryption given its Id</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result"
				/>
				<param name="retrievalId" 
					type="path" 
					dataType="int"
					description="Parent Retrieval"
				/>

				<param name="decryptionId" 
					type="path" 
					dataType="int"
					description="Id of Decryption to retrieve."
				/>
				
				<to uri="direct:content-negotiation"/>
			</get>
			
			<post type="org.enquery.encryptedquery.querier.data.entity.json.Retrieval"
				outType="org.enquery.encryptedquery.querier.data.entity.json.RetrievalResponse">
				
				<description>Create a new Decryption</description>

				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="querySchemaId" 
					type="path" 
					dataType="int"
					description="Parent Query Schema."
				/>
				<param name="queryId" 
					type="path" 
					dataType="int"
					description="Parent Query."
				/>
				<param name="scheduleId" 
					type="path" 
					dataType="int"
					description="Parent Schedule."
				/>
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Parent Result"
				/>
				<param name="retrievalId" 
					type="path" 
					dataType="int"
					description="Parent Retrieval"
				/>
				
				<to uri="direct:create-decryption"/>
			</post>
		</rest>
		
		<route id="resources">
			<from uri="direct:resources"/>
			<to uri="bean:restRegistry?method=list"/>
			<convertBodyTo type="org.enquery.encryptedquery.querier.data.entity.json.ResourceCollectionResponse"/>
			<to uri="direct:success"/>
		</route>
		
		<route id="success">
			<from uri="direct:success"/>

			<setHeader headerName="Content-Type">
				<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
			</setHeader>
			
			<setHeader headerName="CamelHttpResponseCode">
				<constant>200</constant>
			</setHeader>
		</route>
		
		<route id="created">
			<from uri="direct:created"/>

			<setHeader headerName="Location">
				<simple>${body.data.selfUri}</simple>
			</setHeader>
			
			<setHeader headerName="Content-Type">
				<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
			</setHeader>
			
			<setHeader headerName="CamelHttpResponseCode">
				<constant>201</constant>
			</setHeader>
		</route>
		
		<route id="content-negotiation">
			<from uri="direct:content-negotiation"/>
			<filter>
				<simple>${header.Accept} != null</simple>
				<choice>
					<when>
						<!-- TODO:  Improve comparison not as strings, but using Guava MediaType or javax.ws.rs.core.MediaType  -->
						<simple>'${properties:api.media.type}; version=${properties:api.latest.version}' != ${header.Accept}</simple>
						
						<log message="Unrecognized Media Type: ${header.Accept}"/>
						<setHeader headerName="Content-Type">
							<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
						</setHeader>
						<setHeader headerName="CamelHttpResponseCode">
							<constant>406</constant>
						</setHeader>
						<stop/>
					</when>
				</choice>
			</filter>
			
			<!-- Content Negotiation Succeeded, forward to handler route -->
			<toD uri="direct:${header.CamelServletContextPath}"/>
		</route>
		
		<route id="get-from-responder" errorHandlerRef="noErrorHandler">
			<!-- Propagate exceptions connecting to Responder to caller route -->
			<from uri="direct:get-from-responder"/>
		
			<filter>
				<simple>${properties:responder.offline} == false</simple>
			
				<setBody>
					<simple>${null}</simple>
				</setBody>
				<setHeader headerName="CamelHttpMethod">
					<constant>GET</constant>
				</setHeader>
			
				<to uri="direct:send-to-responder" />
			</filter>
		</route>
		
		<route id="send-to-responder" errorHandlerRef="noErrorHandler" streamCache="false">
			<!-- Propagate exceptions connecting to Responder to caller route -->
			<from uri="direct:send-to-responder"/>
		
			<filter>
				<simple>${properties:responder.offline} == false</simple>
				<setHeader headerName="Accept">
					<simple>{{responder.api.media.type}}; version={{responder.api.version}}</simple>
				</setHeader>
				
				<to uri="http4://{{responder.host}}:{{responder.port}}?bridgeEndpoint=true&amp;headerFilterStrategy=#clientHeaderFilter&amp;disableStreamCache=true" />
				<!-- <log message="Received: ${body}"/> -->
			</filter>
		</route>
		
	</camelContext>

</blueprint>
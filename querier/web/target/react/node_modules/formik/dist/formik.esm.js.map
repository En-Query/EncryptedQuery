{"version":3,"file":"formik.esm.js","sources":["../src/connect.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/withFormik.tsx","../src/FieldArray.tsx","../src/FastField.tsx"],"sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport { FormikContext } from './types';\n\nexport const {\n  Provider: FormikProvider,\n  Consumer: FormikConsumer,\n} = createContext<FormikContext<any>>({} as any);\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  return hoistNonReactStatics<\n    OuterProps,\n    OuterProps & { formik: FormikContext<Values> }\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentClass<OuterProps> & {\n    WrappedComponent: React.ComponentClass<\n      OuterProps & { formik: FormikContext<Values> }\n    >;\n  };\n}\n","import cloneDeep from 'lodash.clonedeep';\nimport toPath from 'lodash.topath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via it's path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport warning from 'warning';\nimport deepmerge from 'deepmerge';\nimport { FormikProvider } from './connect';\nimport {\n  FormikActions,\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikContext,\n} from './types';\nimport {\n  isEmptyChildren,\n  isFunction,\n  isNaN,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n} from './utils';\n\nexport class Formik<Values = {}, ExtraProps = {}> extends React.Component<\n  FormikConfig<Values> & ExtraProps,\n  FormikState<any>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  initialValues: Values;\n  didMount: boolean;\n  hcCache: {\n    [key: string]: (e: string | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: {\n    [field: string]: {\n      validate?: ((value: any) => string | Promise<void> | undefined);\n    };\n  };\n\n  constructor(props: FormikConfig<Values> & ExtraProps) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n    };\n    this.didMount = false;\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n    warning(\n      !(props.component && props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(props.component && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(props.render && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  registerField = (\n    name: string,\n    fns: {\n      reset?: ((nextValues?: any) => void);\n      validate?: ((value: any) => string | Promise<void> | undefined);\n    }\n  ) => {\n    this.fields[name] = fns;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentDidMount() {\n    this.didMount = true;\n  }\n\n  componentWillUnmount() {\n    // This allows us to prevent setting state on an\n    // unmounted component. This can occur if Formik is in a modal, and submission\n    // toggles show/hide, and validation of a blur field takes longer than validation\n    // before a submit.\n    // @see https://github.com/jaredpalmer/formik/issues/597\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n    this.didMount = false;\n  }\n\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values> & ExtraProps>) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(prevProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = this.props.initialValues;\n      // @todo refactor to use getDerivedStateFromProps?\n      this.resetForm(this.props.initialValues);\n    }\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikValues) => {\n    this.setState({ values }, () => {\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    this.setState({ isSubmitting });\n  };\n\n  /**\n   * Run field level validation\n   */\n  validateField = (field: string) => {\n    this.setState({ isValidating: true });\n    this.runSingleFieldLevelValidation(\n      field,\n      getIn(this.state.values, field)\n    ).then(error => {\n      if (this.didMount) {\n        this.setState({\n          errors: setIn(this.state.errors, field, error),\n          isValidating: false,\n        });\n      }\n    });\n  };\n\n  runSingleFieldLevelValidation = (\n    field: string,\n    value: void | string\n  ): Promise<string> => {\n    return new Promise(resolve =>\n      resolve(this.fields[field].validate!(value))\n    ).then(x => x, e => e);\n  };\n\n  runFieldLevelValidations(\n    values: FormikValues\n  ): Promise<FormikErrors<Values>> {\n    const fieldKeysWithValidation: string[] = Object.keys(this.fields).filter(\n      f =>\n        this.fields &&\n        this.fields[f] &&\n        this.fields[f].validate &&\n        isFunction(this.fields[f].validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues) => {\n    return new Promise(resolve => {\n      const { validationSchema } = this.props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema()\n        : validationSchema;\n      validateYupSchema(values, schema).then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  };\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  runValidations = (\n    values: FormikValues = this.state.values\n  ): Promise<FormikErrors<Values>> => {\n    this.setState({ isValidating: true });\n    return Promise.all([\n      this.runFieldLevelValidations(values),\n      this.props.validationSchema ? this.runValidationSchema(values) : {},\n      this.props.validate ? this.runValidateHandler(values) : {},\n    ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\n      const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n        [fieldErrors, schemaErrors, handlerErrors],\n        { arrayMerge }\n      );\n\n      if (this.didMount) {\n        this.setState({ isValidating: false, errors: combinedErrors });\n      }\n\n      return combinedErrors;\n    });\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n    // @todo someone make this less disgusting.\n    //\n    // executeChange is the core of handleChange, we'll use it cache change\n    // handlers like Preact's linkState.\n    const executeChange = (\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field!, val),\n        }));\n\n        if (this.props.validateOnChange) {\n          this.runValidations(setIn(this.state.values, field, val));\n        }\n      }\n    };\n\n    // Actually execute logic above....\n    // cache these handlers by key like Preact's linkState does for perf boost\n    if (isString(eventOrPath)) {\n      return isFunction(this.hcCache[eventOrPath])\n        ? this.hcCache[eventOrPath] // return the cached handled\n        : (this.hcCache[eventOrPath] = (\n            // make a new one\n            event: React.ChangeEvent<any> | string\n          ) =>\n            executeChange(\n              event /* string or event, does not matter */,\n              eventOrPath /* this is path to the field now */\n            ));\n    } else {\n      executeChange(eventOrPath);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    // Set form field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        values: setIn(prevState.values, field, value),\n      }),\n      () => {\n        if (this.props.validateOnChange && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          !!(\n            activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type')\n          ),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    return this.runValidations().then(combinedErrors => {\n      const isValid = Object.keys(combinedErrors).length === 0;\n      if (isValid) {\n        this.executeSubmit();\n      } else if (this.didMount) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        this.setState({ isSubmitting: false });\n      }\n    });\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (eventOrString: any): void | ((e: any) => void) => {\n    const executeBlur = (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    };\n\n    if (isString(eventOrString)) {\n      // cache these handlers by key like Preact's linkState does for perf boost\n      return isFunction(this.hbCache[eventOrString])\n        ? this.hbCache[eventOrString]\n        : (this.hbCache[eventOrString] = (event: any) =>\n            executeBlur(event, eventOrString));\n    } else {\n      executeBlur(eventOrString);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string | undefined) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextValues?: Values) => {\n    const values = nextValues ? nextValues : this.props.initialValues;\n\n    this.initialValues = values;\n\n    this.setState({\n      isSubmitting: false,\n      isValidating: false,\n      errors: {},\n      touched: {},\n      error: undefined,\n      status: undefined,\n      values,\n      submitCount: 0,\n    });\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.runValidations,\n      validateField: this.validateField,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n      // Field needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  getFormikContext = (): FormikContext<any> => {\n    return {\n      ...this.getFormikBag(),\n      validationSchema: this.props.validationSchema,\n      validate: this.props.validate,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    const ctx = this.getFormikContext();\n    return (\n      <FormikProvider value={ctx}>\n        {component\n          ? React.createElement(component as any, props)\n          : render\n            ? (render as any)(props)\n            : children // children come last, always called\n              ? typeof children === 'function'\n                ? (children as any)(props)\n                : !isEmptyChildren(children)\n                  ? React.Children.only(children)\n                  : null\n              : null}\n      </FormikProvider>\n    );\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.error(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\nimport warning from 'warning';\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FieldInner<Props = {}, Values = {}> extends React.Component<\n  FieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n\n    const { render, children, component, formik } = props;\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    formik.registerField(props.name, {\n      validate: props.validate,\n    });\n  }\n\n  componentDidUpdate(\n    prevProps: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const Field = connect<FieldAttributes<any>, any>(FieldInner);\n","import * as React from 'react';\nimport { connect } from './connect';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<keyof React.FormHTMLAttributes<HTMLFormElement>, 'onSubmit'>\n>;\n\nexport const Form = connect<FormikFormProps>(\n  ({ formik: { handleSubmit }, ...props }) => (\n    <form onSubmit={handleSubmit} {...props} />\n  )\n);\n\nForm.displayName = 'Form';\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikActions,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        val[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        return (\n          <Formik\n            {...this.props as any}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics<OuterProps, OuterProps & FormikProps<Values>>(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash.clonedeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<ArrayHelpers & { form: FormikProps<any> }>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this);\n    this.pop = this.pop.bind(this);\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean,\n    alterErrors: boolean\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm, values, touched, errors },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => ({\n        ...prevState,\n        values: setIn(prevState.values, name, fn(getIn(values, name))),\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fn(getIn(errors, name)))\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fn(getIn(touched, name)))\n          : prevState.touched,\n      }),\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      false,\n      false\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField(\n      (array: any[]) => move(array, from, to),\n      false,\n      false\n    );\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      false,\n      false\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let arr = [];\n    this.updateArrayField(\n      (array: any[]) => {\n        arr = array ? [value, ...array] : [value];\n        return arr;\n      },\n      false,\n      false\n    );\n    return arr.length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props = { ...arrayHelpers, form: restOfFormik, name };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport warning from 'warning';\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\nexport interface FastFieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FastFieldConfig<T> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FastFieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FastFieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?:\n    | ((props: FastFieldProps<any>) => React.ReactNode)\n    | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    props: T & GenericFieldHTMLAttributes & { formik: FormikContext<any> }\n  ) => boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props);\n    } else if (\n      getIn(this.props.formik.values, this.props.name) !==\n        getIn(props.formik.values, this.props.name) ||\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(\n    prevProps: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FastFieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],"names":["React.createElement","React.Children","tslib_1.__extends","React.Component","Component"],"mappings":"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"}
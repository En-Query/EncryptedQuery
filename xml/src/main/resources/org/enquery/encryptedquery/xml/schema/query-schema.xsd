<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
 <xs:schema 
 	targetNamespace="http://enquery.net/encryptedquery/queryschema"
	xmlns="http://enquery.net/encryptedquery/queryschema"
	xmlns:qs="http://enquery.net/encryptedquery/queryschema"
	xmlns:dschema="http://enquery.net/encryptedquery/dataschema"
 	xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified">

    <xs:import schemaLocation="data-schema.xsd"
        namespace="http://enquery.net/encryptedquery/dataschema"/>

    <xs:element name="querySchema" type="querySchema">
    	<xs:unique name="uniqueFieldNames">
              <xs:selector xpath="qs:field"/>
              <xs:field xpath="qs:name"/>
        </xs:unique>
    </xs:element>
    
    <xs:complexType name="querySchema">
        <xs:sequence>
            <xs:element name="name" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The name of the query schema.
                        The name omits leading and trailing
                        whitespace, and is case sensitive.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            
            <xs:element name="selectorField" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The name of the field used as
                        the selector for this query.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="field" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="name" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>The name of the
                                    data element.
                                    The name omits
                                    leading and trailing whitespace,
                                    and is case sensitive.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>

                        <xs:element name="size" type="xs:int" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The maximum length for string or 
                                    byte[] elements. Entire string or byte[] if not specified.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        
                        <xs:element name="maxArrayElements" type="xs:int" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The maximum number of elements if the 
                                    element is an array. All elements returned if unspecified.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            
			<xs:element ref="dschema:dataSchema"/>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<xs:schema
	targetNamespace="http://enquery.net/encryptedquery/execution"
	xmlns="http://enquery.net/encryptedquery/execution"
	xmlns:ex="http://enquery.net/encryptedquery/execution"
	xmlns:pag="http://enquery.net/encryptedquery/pagination"
	xmlns:q="http://enquery.net/encryptedquery/query"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">

	<xs:import schemaLocation="query.xsd" namespace="http://enquery.net/encryptedquery/query"/>
	
	<xs:element name="execution" type="execution" />
	
	
	<xs:complexType name="Configuration">
		<xs:sequence>
			<xs:element name="entry" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="key" type="xs:string" use="required" />
					<xs:attribute name="value" type="xs:string" use="required" />
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="execution">
		<xs:sequence>
			<xs:element name="scheduledFor" type="xs:dateTime">
				<xs:annotation>
					<xs:documentation>Time stamp when this Execution is expected to be run.  This time stamp is rounded to the next minute.</xs:documentation>
				</xs:annotation>
			</xs:element>
			
			<xs:element name="configuration" type="Configuration" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Additional configuration for this execution.</xs:documentation>
				</xs:annotation>
			</xs:element>
			
			<xs:element name="submittedOn" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Time stamp when this Execution was originally received. System assigned, not present for submissions.</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="startedOn" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Time stamp when this Execution was started. System assigned, not present for submissions.</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="completedOn" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Time stamp when this Execution finished running. System assigned, not present for submissions.</xs:documentation>
				</xs:annotation>
			</xs:element>
			
			<xs:element name="errorMessage" minOccurs="0" type="xs:string">
				<xs:annotation>
					<xs:documentation>Error message of this execution if failed. Optional. Not present for submissions.</xs:documentation>
				</xs:annotation>
			</xs:element>
			
			<xs:element name="cancelled" minOccurs="0" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>True if job was canceled. Optional. Not present for submissions.</xs:documentation>
				</xs:annotation>
			</xs:element>
			
			<!-- Keep query at the end, since it can be beig, to allow parsing the small
				data elements without having to load the query -->
			<xs:element name="query" type="q:Query" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Query to be executed execute. Only present for submissions, since this can be very large.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
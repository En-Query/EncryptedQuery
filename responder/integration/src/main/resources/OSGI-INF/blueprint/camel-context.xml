<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	
	<camelContext xmlns="http://camel.apache.org/schema/blueprint" id="rest" trace="true">
		
		<routeContextRef ref="data-schema-routes"/>
		<routeContextRef ref="data-source-routes"/>
		<routeContextRef ref="execution-routes"/>
		<routeContextRef ref="result-routes"/>
		<routeContextRef ref="dataschema-inbox-routes"/>  
		
		<dataFormats>
			<jaxb id="queryFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/query.xsd"
			/>
			<jaxb id="queryKeyFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/queryKey.xsd"
			/>
			
			<jaxb id="executionFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/execution-resources.xsd"
			/>

			<jaxb  id="dataSchemaFormat"
				 contextPath="org.enquery.encryptedquery.xml.schema"
				 schema="classpath:/org/enquery/encryptedquery/xml/schema/data-schema.xsd"
			/>
		</dataFormats>
		
		<onException>
			<exception>java.lang.Exception</exception>
			<handled><constant>true</constant></handled>
			
			<log loggingLevel="ERROR" message="${exception.stacktrace}." />
			<setHeader headerName="CamelHttpResponseCode">
				<constant>500</constant>
			</setHeader>
			<setBody>
				<simple>${null}</simple>
			</setBody>
			<stop/>
		</onException>
		
		<restConfiguration 
			component="servlet"
			bindingMode="xml" 
			contextPath="{{context.path}}{{api.root.path}}" 
			port="{{port}}"
			enableCORS="false">

			<componentProperty key="matchOnUriPrefix" value="true"/>

			<endpointProperty key="servletName" value="ResponderRestApiServlet"/>
			<endpointProperty key="headerFilterStrategy" value="#headerFilter" />
			<endpointProperty key="disableStreamCache" value="true"/>

			<!-- disable jaxb from overriding the content-type header -->
			<dataFormatProperty key="contentTypeHeader" value="false" />
			<dataFormatProperty key="objectFactory" value="true" />
 			<dataFormatProperty key="contextPath" value="org.enquery.encryptedquery.xml.schema"/>
			<dataFormatProperty key="schema" 
				value="classpath:/org/enquery/encryptedquery/xml/schema/data-schema-resources.xsd,classpath:/org/enquery/encryptedquery/xml/schema/data-source-resources.xsd,classpath:/org/enquery/encryptedquery/xml/schema/execution-resources.xsd,classpath:/org/enquery/encryptedquery/xml/schema/result-resources.xsd" />
   		</restConfiguration>

		<rest path="/dataschemas" produces="application/xml">
			<description>Data Schema Rest Service</description>

			<get outType="org.enquery.encryptedquery.xml.schema.DataSchemaResources">
				<description>List available data schemas</description>
				<to uri="direct:content-negotiation"/>
			</get>
		</rest>
		
		<rest path="/datasources">
			<description>Data Source Rest Service</description>

			<get outType="org.enquery.encryptedquery.xml.schema.DataSourceResources">
				<description>List available data sources</description>
				<to uri="direct:content-negotiation"/>				
			</get>
			
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/datasources" produces="application/xml">
			<get outType="org.enquery.encryptedquery.xml.schema.DataSourceResources">
				<description>List available data sources</description>
				<to uri="direct:content-negotiation"/>				
			</get>
			<get uri="/{dataSourceId}"  outType="org.enquery.encryptedquery.xml.schema.DataSourceResource">
				<description>Retrieve a specific data source</description>
				<to uri="direct:content-negotiation"/>				
			</get>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/datasources/{dataSourceId}/executions">
			<description>Executions Rest Service</description>

			<get outType="org.enquery.encryptedquery.xml.schema.ExecutionResources">
				<description>List Executions</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Parent Data Source."
				/>
				
				<to uri="direct:content-negotiation"/>				
			</get>
			
			<get uri="/{executionId}" outType="org.enquery.encryptedquery.xml.schema.ExecutionResources">
				<description>List Executions</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Parent Data Source."
				/>
				
				<param name="executionId" 
					type="path" 
					dataType="int"
					description="Id of the Execution resource to retrieve."
				/>
				
				<to uri="direct:content-negotiation"/>				
			</get>
			
			<post bindingMode="off" type="org.enquery.encryptedquery.xml.schema.Execution" outType="org.enquery.encryptedquery.xml.schema.ExecutionResource">
				<!-- auto binding is off here to be able to handle very large queries -->
				<description>Create a new Execution</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Parent Data Source."
				/>
				<to uri="direct:create-execution" />
			</post>
		</rest>
		
		<rest path="/dataschemas/{dataSchemaId}/datasources/{dataSourceId}/executions/{executionId}/results">
			<description>Results Rest Service</description>

			<get outType="org.enquery.encryptedquery.xml.schema.ResultResources">
				<description>List Results</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Parent Data Source."
				/>
				
				<param name="executionId" 
					type="path" 
					dataType="int"
					description="Parent Execution."
				/>
				
				<to uri="direct:content-negotiation"/>				
			</get>
			
			<get uri="/{resultId}" bindingMode="off" outType="org.enquery.encryptedquery.xml.schema.ResultResource">
			
				<!-- auto binding is off here to be able to handle very large results -->
				<description>Retrieve a Result</description>
				
				<param name="dataSchemaId" 
					type="path" 
					dataType="int"
					description="Parent Data Schema."
				/>
				<param name="dataSourceId" 
					type="path" 
					dataType="int"
					description="Parent Data Source."
				/>
				
				<param name="executionId" 
					type="path" 
					dataType="int"
					description="Parent Execution."
				/>
				
				<param name="resultId" 
					type="path" 
					dataType="int"
					description="Id of the result to retrieve."
				/>
				
				<to uri="direct:content-negotiation"/>				
			</get>
		</rest>
		
		
		<route id="success">
			<from uri="direct:success"/>

			<setHeader headerName="Content-Type">
				<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
			</setHeader>
			
			<setHeader headerName="CamelHttpResponseCode">
				<constant>200</constant>
			</setHeader>
		</route>
		
		<route id="created">
			<from uri="direct:created"/>

			<setHeader headerName="Location">
				<simple>${body.selfUri}</simple>
			</setHeader>
			
			<setHeader headerName="Content-Type">
				<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
			</setHeader>
			
			<setHeader headerName="CamelHttpResponseCode">
				<constant>201</constant>
			</setHeader>
		</route>
		
		<route id="content-negotiation">
			<from uri="direct:content-negotiation"/>
			<filter>
				<simple>${header.Accept} != null</simple>
				<choice>
					<when>
						<!-- TODO:  Improve comparison not as strings, but using Guava MediaType or javax.ws.rs.core.MediaType  -->
						<simple>'${properties:api.media.type}; version=${properties:api.latest.version}' != ${header.Accept}</simple>
						
						<log message="Unrecognized Media Type: ${header.Accept}"/>
						<setHeader headerName="Content-Type">
							<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
						</setHeader>
						<setHeader headerName="CamelHttpResponseCode">
							<constant>406</constant>
						</setHeader>
						<stop/>
					</when>
				</choice>
			</filter>
			
			<!-- Content Negotiation Succeeded, forward to handler route -->
			<toD uri="direct:${header.CamelServletContextPath}"/>
		</route>
		
	</camelContext>
</blueprint>
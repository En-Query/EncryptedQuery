<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  EncryptedQuery is an open source project allowing user to query databases with queries under homomorphic encryption to securing the query and results set from database owner inspection. 
  Copyright (C) 2018  EnQuery LLC 
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
 
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<routeContext id="execution-routes" xmlns="http://camel.apache.org/schema/blueprint">
		
		<route id="list-executions">
			<from uri="direct:/dataschemas/{dataSchemaId}/datasources/{dataSourceId}/executions"/>
			
			<to uri="direct:resolve-execution-parents"/>
			
			<bean ref="executionRepo" method="list(${header.dataSchema}, ${header.dataSource})"/>

			<convertBodyTo type="org.enquery.encryptedquery.xml.schema.ExecutionResources"/>
			<to uri="direct:success"/>
		</route>
		
		
		<route id="retrieve-execution">
			<from uri="direct:/dataschemas/{dataSchemaId}/datasources/{dataSourceId}/executions/{executionId}"/>
			
			<to uri="direct:resolve-execution-parents"/>
			
			<bean ref="executionRepo" 
				method="findForDataSource(${header.dataSource}, ${header.executionId})"/>

			<filter>
				<simple>${body} == null</simple>
				<log message="Execution not found: ${header.executionId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
			
			<convertBodyTo type="org.enquery.encryptedquery.xml.schema.ExecutionResource"/>
			<to uri="direct:success"/>
		</route>
		
		<route id="create-execution" streamCache="false">
			<from uri="direct:create-execution"/>
			
			<to uri="direct:resolve-execution-parents"/>
			
			<!-- this service has auto binding off, so we need to marshal explicitly -->
			
			<!-- stores and schedules the execution -->
			<bean ref="executionUpdater" method="create(${header.dataSchema}, ${header.dataSource}, ${body})"/>
			
			<convertBodyTo type="org.enquery.encryptedquery.xml.schema.ExecutionResource"/>
			
			<!-- do not send to direct:created since we are doing out marshaling explicitly here  -->
			<setHeader headerName="Location">
				<simple>${body.selfUri}</simple>
			</setHeader>
			
			<!-- this service has auto binding off, so we need to marshal explicitly -->
			<marshal ref="executionFormat"/>
			
			<setHeader headerName="Content-Type">
				<simple>{{api.media.type}}; version={{api.latest.version}}</simple>
			</setHeader>
			
			<setHeader headerName="CamelHttpResponseCode">
				<constant>201</constant>
			</setHeader>
		</route>
		
		<route id="resolve-execution-parents">
			<from uri="direct:resolve-execution-parents"/>
			
			<setHeader headerName="dataSchema">
				<method ref="dataSchemaRegistry" method="find(${header.dataSchemaId})"/>
			</setHeader>
			<filter>
				<simple>${header.dataSchema} == null</simple>
				<log message="Data Schema not found: ${header.dataSchemaId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>
			
			<setHeader headerName="dataSource">
				<method ref="dataSourceRegistry" method="find(${header.dataSchema}, ${header.dataSourceId})"/>
			</setHeader>
			<filter>
				<simple>${header.dataSource} == null</simple>
				<log message="Data Source ${header.dataSourceId} not found for Data Schema ${header.dataSchemaId}."/>
				<setHeader headerName="CamelHttpResponseCode">
					<constant>404</constant>
				</setHeader>
				<stop/>
			</filter>			
		</route>

	</routeContext>
</blueprint>